// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String
  password  String
  avatar    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Class {
  id              String            @id @default(uuid())
  name            Int
  order           Int
  students        Student[]
  SubjectsInClass SubjectsInClass[]
}

model Section {
  id       String    @id @default(uuid())
  name     String
  order    Int
  students Student[]
}

// Student Profile

model Student {
  id             String           @id @default(uuid())
  name           String
  dateOfBirth    DateTime
  gender         String
  address        String
  contactNo      String
  email          String
  joinDate       DateTime
  rollNo         Int
  referenceCode  String
  Class          Class?           @relation(fields: [classId], references: [id])
  classId        String?
  Section        Section?         @relation(fields: [sectionId], references: [id])
  sectionId      String?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  MedicalHistory MedicalHistory[]
}

model MedicalHistory {
  id          String   @id @default(uuid())
  student     Student  @relation(fields: [studentId], references: [id])
  studentId   String
  description String
  severity    String
  triageNote  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// End of Student Profile

model Event {
  id          String   @id @default(uuid())
  name        String
  description String?
  fromDate    DateTime
  endDate     DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model FiscalYear {
  id        String   @id @default(uuid())
  name      String
  startDate DateTime
  endDate   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Subject {
  id              String            @id @default(uuid())
  name            String
  description     String
  SubjectsInClass SubjectsInClass[]
}

model SubjectsInClass {
  class     Class   @relation(fields: [classId], references: [id])
  classId   String
  subject   Subject @relation(fields: [subjectId], references: [id])
  subjectId String

  @@id([classId, subjectId])
}
